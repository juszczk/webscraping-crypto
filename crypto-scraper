#!/usr/bin/env python
# coding: utf-8

# In[1]:
import time
import numpy as np
import pandas as pd

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait


# In[2]:
cryptoDF = pd.DataFrame(columns = ["Currency", "Ticker", "Date", "Opening Price", "High Price", 
                                   "Low Price", "Closing Price", "Volume", "Market Cap"])


# In[3]:
currencies = ["litecoin"]


# In[14]:
driver = webdriver.Chrome("/Users/marinajuszczyk/chromedriver")
driver.get("https://coinmarketcap.com/")

cryptoDF = pd.DataFrame(columns = ["Currency", "Ticker", "Date", "OpeningPrice", "HighPrice", 
                                   "LowPrice", "ClosingPrice", "Volume", "MarketCap"])

for currencyName in currencies:

    name = currencyName
    cookiesButton = driver.find_element_by_xpath('/html/body/div[3]/div[1]/button')
    cookiesButton.click()
    time.sleep(3)
    
    driver.execute_script("window.scrollTo(0, 400)")
    xpath_open1 = str('//*[@id="id-')
    xpath_end1 = str('"]/td[2]/a')
    xpath_currency = xpath_open1 + str(currencyName) + xpath_end1
    time.sleep(3)
    
    currencyPage = driver.find_element_by_xpath(xpath_currency)
    currencyPage.click()
    WebDriverWait(driver, 10).until(EC.element_to_be_clickable((By.XPATH, xpath_currency)))
    time.sleep(3)
    
    ticker = driver.find_element_by_xpath('/html/body/div[2]/div[2]/div[1]/div[2]/div[1]/h1/span').text.strip("( )")
    driver.execute_script("window.scrollTo(0, 400)")
    historyPage = driver.find_element_by_xpath('/html/body/div[2]/div[2]/div[1]/div[4]/div[1]/ul/li[6]/a')
    historyPage.send_keys("\n")
    
    driver.execute_script("window.scrollTo(0, 600)")
    periodCaret = driver.find_element_by_xpath('//*[@id="reportrange"]/b')
    actions = ActionChains(driver)
    actions.move_to_element(periodCaret).perform()
    periodCaret.click()
    time.sleep(3)
    
    periodPage = driver.find_element_by_xpath('/html/body/div[7]/div[3]/ul/li[3]')
    periodPage.click()

    links = []
    for j in range(1, 93):
        xpath_open2 = str('//*[@id="historical-data"]/div/div[2]/table/tbody/tr[')
        xpath_mid2 = str(j)
        xpath_end2 = str(']')
        xpath_daily = xpath_open2 + xpath_mid2 + xpath_end2 
        links.append(xpath_daily)
        
        for link in links:
            xpath_open3 = str('/td[')
            xpath_end3 = str(']')
        
            xapthDate = str(link) + xpath_open3 + str(1) + xpath_end3
            xpathOpen = str(link) + xpath_open3 + str(2) + xpath_end3
            xpathHigh = str(link) + xpath_open3 + str(3) + xpath_end3
            xpathLow = str(link) + xpath_open3 + str(4) + xpath_end3
            xpathClose = str(link) + xpath_open3 + str(5) + xpath_end3
            xpathVolume = str(link) + xpath_open3 + str(6) + xpath_end3
            xpathMarketCap = str(link) + xpath_open3 + str(7) + xpath_end3
        
            date = driver.find_element_by_xpath(xapthDate).text
            openP = driver.find_element_by_xpath(xpathOpen).text
            highP = driver.find_element_by_xpath(xpathHigh).text
            lowP = driver.find_element_by_xpath(xpathLow).text
            closeP = driver.find_element_by_xpath(xpathClose).text
            volume = driver.find_element_by_xpath(xpathVolume).text
            marketCap = driver.find_element_by_xpath(xpathMarketCap).text
        
        cryptoDF = cryptoDF.append({"Currency": name, "Ticker": ticker, "Date": date, "Opening Price": openP, "High Price": highP, "Low Price": lowP,
                                    "Closing Price": closeP, "Volume": volume, "Market Capitalization": marketCap}, ignore_index = True)

driver.delete_all_cookies()
driver.quit()


# In[15]:
cryptoDF.head()


# In[16]:
cryptoDF.to_csv("etc-ws.csv", encoding = 'utf-8', index = False)
